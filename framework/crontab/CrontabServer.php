<?php
/**
 * Created by PhpStorm.
 * User: rxw
 * Date: 17-9-16
 * Time: 下午8:48
 */
namespace framework\crontab;
use framework\base\Container;
use framework\server\BaseServer;

class CrontabServer extends BaseServer
{

    protected $_nodeHandle;
    protected $_curNode;
    protected $_curTask;
    protected $_nodeNum = 0;
    protected $_busyNodeNum = 0;

    protected function init()
    {
        $this->_server = new \swoole_server($this->_conf['ip'], $this->_conf['port']);
        parent::init(); // TODO: Change the autogenerated stub
        $this->onPipMessage();
    }

    protected function afterWorkStart(\swoole_server $serv, $workerId)
    {
        if ($this->isWork($workerId)) {
            \swoole_set_process_name('php-crontab');
            $this->_nodeHandle = new \framework\conformancehash\Dispatcher();
//                监控其他服务节点
        } else {
            \swoole_set_process_name('php-task-crontab');
//                启动任务  只能有一个启动
            if (!$this->isFirstTask($workerId)) {
                return false;
            }

            while(true)
            {
                try{
                    $num = 0;
                    foreach(Container::getInstance()->getComponent(SYSTEM_APP_NAME, 'crontab')->run() as $task_item) {
                        if (!empty($task_item)) {
                            $this->_server->sendMessage(['cmd' => 'task', 'data' => $task_item, 'no' => $num], 0);
                            ++$num;
                        }
                    }
                    // 每秒执行一次
                    usleep($this->getValueFromConf('task_step', 1000000));
                } catch (\Throwable $e) {
                    $this->triggerThrowable($e);
                    break;
                }
            }
        }
        return parent::afterWorkStart($serv, $workerId); // TODO: Change the autogenerated stub
    }

    protected function afterConnect(\swoole_server $server, $client_id, $from_id)
    {
        $this->_nodeHandle->addNode($client_id) && ++$this->_nodeNum;
        
        return parent::afterConnect($server, $client_id, $from_id); // TODO: Change the autogenerated stub
    }

    protected function afterReceive(\swoole_server $serv, $fd, $from_id, $data)
    {
        if ($data === 'busy') {
            $node = $this->_nodeHandle->findNode($fd);
            $node->_isBusy = true;
        } else if ($data === 'free') {
            $node = $this->_nodeHandle->findNode($fd);
            $node->_isBusy = false;
        }
    }

    protected function afterClose(\swoole_server $server, int $client_id, int $from_id)
    {
        $this->_nodeHandle->removeNode($client_id) && --$this->_nodeNum;
        
        return parent::afterClose($server, $client_id, $from_id);
    }

    protected function onPipMessage()
    { 
        // TODO: Implement onShutDown() method.
        $this->_server->on("pipeMessage",function (\swoole_server $serv, $src_worker_id, $data){
            if ($this->isTask($src_worker_id)) {
                if (empty($data['cmd'])) {
                    return false;
                }
                $cmd = $data['cmd'];
                unset($data['cmd']);
                switch ($cmd) {
                    case 'task':
                    $this->_busyNodeNum = 0;
                    $this->dispatchTask($data['data']);
                    break;
                }
            }
        });
    }

    protected function isFirstTask($workId)
    {
        if ($workId = $this->getValueFromConf('work_num', 4)) {
            return true;
        }
        return false;
    }


    protected function dispatchTask($data)
    {
        $this->_curTask = $data;
        $this->_curNode = $this->_nodeHandle->findNextNodeByValue(\serialize($data));
        if (!$this->_curNode) {
            return false;
        }
        if (!$this->_curNode->_isBusy) {
            if (isset($data['retry'])) unset($data['retry']);
            if (isset($data['rand'])) unset($data['rand']);
            unset($data['no']);
            $this->_server->send($this->_curNode->_info, \json_encode(['cmd' => 'task', 'data' => $data]));
        } else if ($this->_busyNodeNum != $this->_nodeNum) {
            ++$this->_busyNodeNum;
            $data['retry'] = $this->_busyNodeNum;
            $this->dispatchTask($data);
        } else {
            $data['rand'] = $this->_busyNodeNum;
            $this->_curNode = $this->_nodeHandle->findNextNodeByValue(\serialize($data));
            if (isset($data['retry'])) unset($data['retry']);
            if (isset($data['rand'])) unset($data['rand']);
            unset($data['no']);
            $this->_server->send($this->_curNode->_info, \json_encode(['cmd' => 'task', 'data' => $data]));
        }
    }
}