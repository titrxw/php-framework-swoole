<?php
/**
 * Created by PhpStorm.
 * User: rxw
 * Date: 17-9-16
 * Time: 下午8:48
 */
namespace framework\server;

use framework\base\Container;

class HttpServer extends BaseServer
{
    protected function init()
    {
        $hasOnRequest = false;
        if (!$this->_server) {
            $hasOnRequest = true;
            $this->_server = new \swoole_http_server($this->_conf['ip'], $this->_conf['port']);
        }

        parent::init(); // TODO: Change the autogenerated stub

        if ($hasOnRequest) {
            $this->onRequest();
        }
    }

    protected function execApp(&$response)
    {
        // TODO: Implement execApp() method.
        $container = Container::getInstance();
        $urlInfo = $container->getComponent(SYSTEM_APP_NAME, 'url')->run();
        $_SERVER['CURRENT_SYSTEM'] = $urlInfo['system'];
        $result = '';

        if ($urlInfo !== false) {
            // 初始化配置项
            if (!$container->appHasComponents($urlInfo['system'])) {
//                这里现在还缺少文件系统
                $appConf = require_file($urlInfo['system'] . '/conf/conf.php');
                $container->addComponents($urlInfo['system'], $appConf['addComponentsMap'] ?? []);
                $container->setAppComponents($urlInfo['system'] ,array(
                    'components' => $appConf['components'] ?? [],
                    'composer' => $appConf['composer'] ?? []
                ));
                unset($appConf);
            }

            $result = $container->getComponent(SYSTEM_APP_NAME, 'dispatcher')->run($urlInfo);
        }

        unset($container);
        return $result;
    }

    protected function onRequest()
    {
        $this->_server->on("request", function (\swoole_http_request $request,\swoole_http_response $response)
        {
            if (DEBUG)
            {
                ob_start();
            }
            if ($this->_event)
            {
                $this->_event->onRequest($request,$response);
            }
            $container = Container::getInstance();
            if (!empty($request->get)) {
                $_GET = $request->get;
            }
            if (!empty($request->post)) {
                $_POST = $request->post;
            }
            if (!empty($request->files)) {
                $_FILES = $request->files;
//                $container->getComponent('upload')->save('file'); 上传文件测试
            }
            if (!empty($request->cookie)) {
                $_COOKIE = $request->cookie;
            }


            try
            {
                if ($this->_event)
                {
                    $this->_event->onResponse($request,$response);
                }
                $request->server['HTTP_HOST'] = $request->header['host'];
                foreach ($request->server as $key => $item)
                {
                    $request->server[strtoupper($key)] = $item;
                    unset($request->server[$key]);
                }
                $_SERVER = $request->server;


                $result = $this->execApp($response);
                $container->getComponent(SYSTEM_APP_NAME, 'cookie')->send($response);
                if (DEBUG)
                {
                    $elseContent = ob_get_clean();
                    if ($elseContent) {
                        if (is_array($elseContent)) {
                            $elseContent = json_encode($elseContent);
                        }
                        $container->getComponent(SYSTEM_APP_NAME, 'response')->send($response, $elseContent);
                        unset($elseContent);
                    }
                }
                $hasEnd = $container->getComponent(SYSTEM_APP_NAME, 'response')->send($response, $result);
            }
            catch (\Throwable $exception)
            {
                $code = $exception->getCode() > 0 ? $exception->getCode() : 404;
                $response->status($code);
                if (DEBUG) {
                    $result = ob_get_clean();
                    $response->write($result . $exception->getMessage().$exception->getTraceAsString());
                }
                $this->handleThrowable($exception);
            }


            if (!$hasEnd) {
                $response->end();
            }
            $container->finish(\getModule());
            $container->finish(SYSTEM_APP_NAME);
            $_GET = [];
            $_POST = [];
            $_FILES = [];
            $_COOKIE = [];
            $_SERVER = [];
            unset($container,$request,$response, $urlInfo);
        });
    }


    protected function afterWorkStop(\swoole_server $serv, $workerId)
    {
        $container = Container::getInstance();
        $container->getComponent(SYSTEM_APP_NAME, 'seaslog')->flushBuffer();
    }

    protected function afterWorkerError(\swoole_server $server, $worker_id, $worker_pid, $exit_code)
    {
        $container = Container::getInstance();
        $container->getComponent(SYSTEM_APP_NAME, 'seaslog')->flushBuffer();
    }
}